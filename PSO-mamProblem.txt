psomam
computeFit<-function(x){
  return (sum(x))
}
initializePosition<-function(particle,elementList){
  currentPos<-list()
  for(i in 1:particle){
    currentPos[[i]]<-sample(-25:25,elementList)
  }
  return(currentPos)
}
initializeVelocity<-function(particle,elementList){
  currentVel<-list()
  for(i in 1:particle){
    currentVel[[i]]<-rep(0,elementList)
  }
  return(currentVel)
}
w<-0.7
c1<-0.2
c2<-0.6
particle<-5
elementList<-10
stop<-104
currentPos=initializePosition(particle,elementList)
currentVel=initializeVelocity(particle,elementList)
fitness<-list()
pbestPrevious<-list()
x=1
gbestPosition<-list()
gbestFitness=0
while(x<=stop){
  fit<-c()
  vtemp<-c()
  cptemp<-c()
  pbestCurrent<-list()
  for(i in 1:length(currentPos)){
    fit=append(fit,computeFit(currentPos[[i]]))
    if(x!=1){
      if(fitness[[x-1]][i]>fit[i]){
        pbestCurrent[[length(pbestCurrent)+1]]=NaN*seq(elementList)
        
        pbestCurrent[[length(pbestCurrent)]]=pbestPrevious[[i]]
      }
      else{
        pbestCurrent[[length(pbestCurrent)+1]]=NaN*seq(elementList)
        
        pbestCurrent[[length(pbestCurrent)]]=currentPos[[i]]
      }
    }
  }

    fitness[[length(fitness)+1]]<-NaN*seq(particle)
    fitness[[length(fitness)]]<-fit
    if(x==1){
      pbestCurrent=currentPos
      index=which.min(abs(fit-50))
      value=min(abs(fit-50))
      gbestFitness=value
      gbestPosition=pbestCurrent[[index]]
    }
    else{
      index=which.min(abs(fit-50))
      value=min(abs(fit-50))
      if(value<gbestFitness){
        gbestPosition=pbestCurrent[[index]]
        gbestFitness=value
      }
    }

    for(i in 1:length(currentPos)){
      vtemp[[i]]=round(w*currentVel[[i]]+
                         c1*runif(1,0,1)*
                         (pbestCurrent[[i]]-currentPos[[i]])+
                         c2*runif(1,0,1)*
                         (gbestPosition-currentPos[[i]]),
                       0
                      )
      cptemp[[i]]=round(currentPos[[i]]+vtemp[[i]],0)
      currentPos[[i]]=cptemp[[i]]
      currentVel[[i]]=vtemp[[i]]

    }
    cat("\nITERATION",x,"\n")
    
    cat('Fitness-',fit,"\n")
    cat('Gbest Position -',gbestPosition,"\n")
   cat('Gbest Fitness -',gbestFitness,"\n")
    if(sum(gbestPosition)==50){
      cat('Result-',gbestPosition)
      break()
    }
    pbestPrevious=pbestCurrent
    x=x+1
}

pso
computeFit<-function(x){
  return (round(1+2*x-x^2,digits=4))
}
initializePosition<-function(particle,elementList){
  currentPos<-list()
  for(i in 1:particle){
    currentPos[[i]]<-runif(elementList,-10,10)
  }
  return(currentPos)
}
initializeVelocity<-function(particle,elementList){
  currentVel<-list()
  for(i in 1:particle){
    currentVel[[i]]<-rep(0,elementList)
  }
  return(currentVel)
}
w<-0.7
c1<-0.2
c2<-0.6
particle<-5
stop<-10
elementList<-1
currentPos=initializePosition(particle,elementList)
currentVel=initializeVelocity(particle,elementList)
fitness<-list()
pbestPrevious<-list()
x=1
gbestPosition=0
gbestFitness=0
while(x<=stop){
  fit<-c()
  vtemp<-c()
  cptemp<-c()
  pbestCurrent<-list()
  
  for(i in 1:length(currentPos)){
    fit=append(fit,computeFit(currentPos[[i]]))
    if(x!=1){
      if(fitness[[x-1]][i]>fit[i]){
        pbestCurrent[[length(pbestCurrent)+1]]=NaN*seq(elementList)
        
        pbestCurrent[[length(pbestCurrent)]]=pbestPrevious[[i]]
      }                                                    
      else{
        pbestCurrent[[length(pbestCurrent)+1]]=NaN*seq(elementList)
        
        pbestCurrent[[length(pbestCurrent)]]=currentPos[[i]]
      }
    }
  }
  fitness[[length(fitness)+1]]<-NaN*seq(particle)
  fitness[[length(fitness)]]<-fit
  
  if(x==1){
    pbestCurrent=currentPos
    index=which.max(fit)
    gbestPosition=pbestCurrent[[index]]
    gbestFitness=max(fit)
  }
  else{
    index=which.max(fit)
    if(max(fit)>gbestFitness){
      gbestFitness=max(fit)
      gbestPosition=pbestCurrent[[index]]
    }
  }
  for(i in 1:length(currentPos)){
    vtemp[[i]]=round(w*currentVel[[i]]+
                       c1*runif(1,0,1)*
                       (pbestCurrent[[i]]-currentPos[[i]])+
                       c2*runif(1,0,1)*
                       (gbestPosition-currentPos[[i]]),
                     2
    )
    cptemp[[i]]=round(currentPos[[i]]+vtemp[[i]],2)
    currentPos[[i]]=cptemp[[i]]
    currentVel[[i]]=vtemp[[i]]
    
  }
  
  cat("\nITERATION",x,"\n")
  cat('CP',x,"\t",'V',x,"\t",'Fitness',"\t",'Pbest',"\n")
  for(i in 1:length(currentPos)){
    cat(currentPos[[i]],"\t",currentVel[[i]],"\t",fitness[[x]][i],"\t",pbestCurrent[[i]],"\n")
  }
  cat('Gbest Fitness -',gbestFitness,"\n")
  cat('Gbest Position -',gbestPosition,"\n")
  x=x+1
  pbestPrevious=pbestCurrent
  
}

a
library(igraph)
# node_heuristic<-c(240,186,182,163,170,150,165,139,120,130,122,104,100,77,72,65,65,0)
# names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R')
# 
# graph_1<-graph(edges=c('A','B','A','C','A','D','A','E','B','K','C','I','D','N','E','J','K','H','I','L','I','M','I','F','N','F','N','J','J','Q','J','G','H','L','L','P','M','O','Q','R','Q','G','P','R','P','O','O','R'),directed=F)
# E(graph_1)$weight<-c(73,64,89,104,83,64,89,40,35,28,20,31,84,53,80,35,36,63,50,65,113,65,41,72)

node_heuristic<-c(223,222,166,192,165,136,122,111,100,60,32,102,0)
names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M')

graph_1<-graph(edges = c('A','B','A','C','B','D','C','D','C','F','C','L','D','E','F','J','F','K','L','M','E','G','J','I','J','K','K','M','G','H','I','H'), directed = F)
E(graph_1)$weight<-c(36,61,31,32,31,80,52,122,112,102,43,45,36,32,30,40)

start_node<-'A'
goal<-'M'

plot(graph_1)

V(graph_1)$color<-"white"
E(graph_1)$color<-"black"

open<-c()
open[start_node]<-node_heuristic[start_node]
closed<-c()
path<-c()
cost<-c()
link<-c()
cost[start_node]<-0
print(cost[start_node])
flag<-FALSE
while(TRUE){
  if(length(open)==0){
    break
  }
  n<-names(open)[1]
  if(n==goal){
    path<-c(path,n)
    flag<-TRUE
    break
  }
  closed<-c(closed,open[1])
  open<-open[-1]
  adj<-adjacent_vertices(graph_1,n)
  for(i in 1:length(adj[[1]])){
    ei<-get.edge.ids(graph_1,c(n,adj[[1]][i]$name))
    cost_of_edge<-E(graph_1)[ei]$weight
    cost_of_node<-cost[n]+cost_of_edge
    total_node_heuristic<-node_heuristic[adj[[1]][i]$name]+cost_of_node
    if(adj[[1]][i]$name %in% names(open)){
      if(open[adj[[1]][i]$name]>total_node_heuristic){
        open[adj[[1]][i]$name]<-total_node_heuristic
        cost[adj[[1]][i]$name]<-cost_of_node
        link[adj[[1]][i]$name]<-n
      }
      next
    }
    if(adj[[1]][i]$name %in% names(closed)){
      if(closed[adj[[1]][i]$name]>total_node_heuristic){
        open[adj[[1]][i]$name]<-total_node_heuristic
        cost[adj[[1]][i]$name]<-cost_of_node
        link[adj[[1]][i]$name]<-n
      }
      next
    }
    open[adj[[1]][i]$name]<-node_heuristic[adj[[1]][i]$name]+cost_of_node
    cost[adj[[1]][i]$name]<-cost_of_node
    link[adj[[1]][i]$name]<-n
  }
  ordered_open<-order(as.numeric(open))
  open<-open[ordered_open]
  print(open)
  path<-c(path,n)
}
for(i in 2:length(path)){
  ei <- get.edge.ids(graph_1, c(path[i],link[path[i]]))
  E(graph_1)[ei]$color<-'orange'
}
plot(graph_1)
print(cost[goal])
if(flag){
  print(path)
}else{
  print("path not found")
}

ga1
functionX<-function(x){
  return (round(x^2,digits=3))
}
computeAccuracy<-function(n,l,u){
  acc<-(u-l)/(2^n)
  return(round(acc,digits=3))
}
binToDec<-function(x){
  sum(2^(which(rev(unlist(strsplit(as.character(x),""))==1))-1))
}
generateXval<-function(nBits,popSize){
  xVal=sample(1:((2^nBits)-1),popSize)
  return(xVal)
}
dectoBin<-function(x,nBits){
  binary<-paste(as.integer(rev(intToBits(x))), collapse = "")
  binValue<-substr(binary, nchar(binary)-nBits+1, nchar(binary))
}
computeXval<-function(n,l,u,x){
  xVal<-l+(((u-l)/((2^n)-1))*x)
  return(round(xVal,digits=3))
}
findChromNo<-function(cumList,rNo){
 
  for(i in 1:length(cumList)){
    if(rNo<cumList[i]){
      return(i)
    }
  }
}
findTrueCount<-function(index,chromList){
  count<-0
  for(i in 1:length(chromList)){
    if(index==chromList[i]){
      count<-count+1
    }
  }
  return(count)
}
Applicable<-function(rNo,p){
  if(rNo<=p){
    return("Y")
  }
  else{
    return("N")
  }
}
getIntermediate<-function(p1,p2,site,nBits){
  z1<-paste0(substr(p1,1,site),substr(p2,site+1,nBits))
  z2<-paste0(substr(p2,1,site),substr(p1,site+1,nBits))
  z<-paste(z1,z2)
  return(z)
}
getMutated<-function(p,site){
  if(substr(p, site, site)=='0'){
    substr(p, site, site) <- '1'
  }
  else{
    substr(p, site, site) <- '0'
  }
  return(p)
}
probType<-"max"
lb<-0
ub<-28
popSize<-20
nBits<-5
pCo<-0.65
pMu<-0.05
xList<-vector()
bitList<-vector()
averageFitness<-vector()

s<-1
stop<-10
while(s<=stop){
  xList<-vector()
  xValList<-vector()
  fXlist<-vector()
  FXlist<-vector()
  probList<-vector()
  cumProbList<-vector()
  rNoList<-vector()
  chromList<-vector()
  trueCountList<-vector()
  if(s==1){
    xList=generateXval(nBits,popSize)
    for(j in 1:length(xList)){
      bitList=append(bitList,dectoBin(xList[j],nBits))
    }
  }
  else{
    for(j in 1:length(bitList)){
      xList=append(xList,binToDec(bitList[j]))
    }
    
  }

  for(i in 1:popSize){
    xValList=append(xValList,computeXval(nBits,lb,ub,xList[i]))

    fXlist=append(fXlist,functionX(xValList[i]))
    if(probType=="max"){
      FXlist=append(FXlist,fXlist[i])
    }
    else{
        val=round(1/(fXlist[i]+1),3)
        FXlist=append(FXlist,val)
    }
  }
  
  sumFx<-sum(FXlist)
  cum<-0
  for(i in 1:length(bitList)){
    val=round((FXlist[i]/sumFx),3)
    probList=append(probList,val)
    cum<-cum+probList[i]
    cumProbList=append(cumProbList,cum)
    rNoList=append(rNoList,round(runif(1,0,1),3))
  }
  for(i in 1:length(bitList)){
    chromList=append(chromList,findChromNo(cumProbList,rNoList[i]))
  }
  for(i in 1:length(bitList)){
    trueCountList=append(trueCountList,findTrueCount(i,chromList))
  }
  cat("ITERATION",s," -SELECTION\n")
  cat('x',"\t",'decimal x',"\t",'x-value',"\t",'f(x)',"\t",'F(x)',"\t",'P(i)',"\t",'Cum P(i)',"\t",'R.No',"\t",'Chrom No',"\t",'True Count',"\n")
  for(i in 1:length(bitList)){
    cat(bitList[i],"\t",xList[i],"\t",xValList[i],"\t",fXlist[i],"\t",FXlist[i],"\t",probList[i],"\t",cumProbList[i],"\t",rNoList[i],"\t",chromList[i],"\t",trueCountList[i],"\n")
  }
  averageFitness=append(averageFitness,round(sumFx/popSize,3))
  
  cat("average fitness value",sumFx/popSize)
  newbitList<-vector()
  rNoList<-vector()
  crossOverApplicableList<-vector()
  mutationApplicableList<-vector()
  mutatedChromosome<-vector()
  intermediatePopList<-vector()
  x<-1
  for(i in 1:length(chromList)){
    newbitList=append(newbitList,bitList[chromList[i]])
    rNo=round(runif(1,0,1),3)
    if(i%%2==0){
      rNoList=append(rNoList,rNoList[i-1])
    }
    else{
      rNoList=append(rNoList,rNo)
      x=x+1
    }
    crossOverApplicableList=append(crossOverApplicableList,Applicable(rNoList[i],pCo))
  }
  x<-1
  rNo1List<-vector()
  for(i in seq(1,length(newbitList),2)){
    if(crossOverApplicableList[i]=='Y' && crossOverApplicableList[i+1]=='Y' ){
      coSite<-sample(1:(nBits-1),1)
      z<-getIntermediate(newbitList[i],newbitList[i+1],coSite,nBits)
      zTemp<-strsplit(z," ")
      intermediatePopList=append(intermediatePopList,zTemp[[1]][1])
      intermediatePopList=append(intermediatePopList,zTemp[[1]][2])
      x<-x+1
    }
    else{
      intermediatePopList=append(intermediatePopList,newbitList[i])
      intermediatePopList=append(intermediatePopList,newbitList[i+1])
    }
  }
  for(i in 1:length(newbitList)){
    rNo1List=append(rNo1List,round(runif(1,0,1),3))
    muSite<-sample(1:nBits,1)
    
    mutationApplicableList=append(mutationApplicableList,Applicable(rNo1List[i],pMu))
    if(mutationApplicableList[i]=='Y'){
      mutatedChromosome=append(mutatedChromosome,getMutated(intermediatePopList[i],muSite))
    }
    else{
      mutatedChromosome=append(mutatedChromosome,intermediatePopList[i])
    }
  }
  cat("\nITERATION",s,"-CROSS OVER & MUTATION \n")
  cat('x',"\t",'r.no',"\t",'crossOver',"\t",'Intermediate',"\t",'R.No',"\t",'Mutation',"\t",'Chromosome',"\n")
 for(i in 1:length(bitList)){
    cat(newbitList[i],"\t",rNoList[i],"\t",crossOverApplicableList[i],"\t",intermediatePopList[i],"\t",rNo1List[i],"\t",mutationApplicableList[i],"\t",mutatedChromosome[i],"\n")
  }
  
  s=s+1
  bitList=mutatedChromosome
}
iteration=1:stop
# Plot the bar chart. 
plot(iteration,averageFitness)

ga2
functionX<-function(x,y){
 res=20+x^2+y^2-10*(cos(2*pi*x)+(cos(2*pi*y)))

  return (round(res,digits=3))
}
computeAccuracy<-function(n,l,u){
  acc<-(u-l)/(2^n)
  return(round(acc,digits=3))
}
generateval<-function(nBits,popSize){
  xVal=sample(1:((2^nBits)-1),popSize)
  return(xVal)
}
dectoBin<-function(x,nBits){
  binary<-paste(as.integer(rev(intToBits(x))), collapse = "")
  binValue<-substr(binary, nchar(binary)-nBits+1, nchar(binary))
}
binToDec<-function(x){
  sum(2^(which(rev(unlist(strsplit(as.character(x),""))==1))-1))
}
computeVal<-function(n,l,u,x){
  val<-l+(((u-l)/((2^n)-1))*x)
  return(round(val,digits=3))
}
findChromNo<-function(cumList,rNo){
  for(i in 1:length(cumList)){
    if(rNo<cumList[i]){
      return(i)
    }
  }
}
findTrueCount<-function(index,chromList){
  count<-0
  for(i in 1:length(chromList)){
    if(index==chromList[i]){
      count<-count+1
    }
  }
  return(count)
}
Applicable<-function(rNo,p){
  if(rNo<=p){
    return("Y")
  }
  else{
    return("N")
  }
}
getIntermediate<-function(p1,p2,site,nBits){
  p1temp<-gsub("\\s+","",p1)
  p2temp<-gsub("\\s+","",p2)
  z1<-paste0(substr(p1temp,1,site),substr(p2temp,site+1,2*nBits))
  z2<-paste0(substr(p2temp,1,site),substr(p1temp,site+1,2*nBits))
  z<-paste(z1,z2)
  return(z)
}
getMutated<-function(p,site){
  ptemp<-gsub("\\s+","",p)
  if(substr(ptemp, site, site)=='0'){
    substr(ptemp, site, site) <- '1'
  }
  else{
    substr(ptemp, site, site) <- '0'
  }
  temp<-paste(substr(ptemp,1,nBits),substr(ptemp,nBits+1,2*nBits))
  return(temp)
}
probType<-"min"
lbX<--5
ubX<-5
lbY<--5
ubY<-5
popSize<-20
nBits<-5
pCo<-0.65
pMu<-0.1
s<-1
stop<-10
averageFitness<-vector()
bitList<-vector()
while(s<=stop){
  xList<-vector()
  yList<-vector()
  xValList<-vector()
  yValList<-vector()
  fXlist<-vector()
  FXlist<-vector()
  probList<-vector()
  cumProbList<-vector()
  rNoList<-vector()
  chromList<-vector()
  trueCountList<-vector()
  if(s==1){
    xList=generateval(nBits,popSize)
    yList=generateval(nBits,popSize)
    for(j in 1:length(xList)){
      bit=''
      bit=paste0(dectoBin(xList[j],nBits)," ",dectoBin(yList[j],nBits))
      bitList=append(bitList,bit)

    }
  }
  else{
    for(j in 1:length(bitList)){
      bitTemp=strsplit(bitList[j],' ')
      xList=append(xList,binToDec(bitTemp[[1]][1]))
      yList=append(yList,binToDec(bitTemp[[1]][2]))    }
    
  }
  for(i in 1:popSize){
   
    xValList=append(xValList,computeVal(nBits,lbX,ubX,xList[i]))
    yValList=append(yValList,computeVal(nBits,lbY,ubY,yList[i]))
    z<-functionX(xValList[i],yValList[i])
    fXlist=append(fXlist,z)
    if(probType=="max"){
      FXlist=append(FXlist,fXlist[i])
    }
    else{
      if(fXlist[i]==0){
        val=round((1/(fXlist[i]+1)),3)
        FXlist=append(FXlist,val)
      }
      else{
        FXlist=append(FXlist,1/fXlist[i])
      }
    }
  }
  sumFx<-sum(FXlist)
  cum<-0
  for(i in 1:length(bitList)){
    val=round((FXlist[i]/sumFx),3)
    probList=append(probList,val)
    cum<-cum+probList[i]
    cumProbList=append(cumProbList,cum)
    rNoList=append(rNoList,round(runif(1,0,1),3))
  }
  for(i in 1:length(bitList)){
    chromList=append(chromList,findChromNo(cumProbList,rNoList[i]))
  }
  for(i in 1:length(bitList)){
    trueCountList=append(trueCountList,findTrueCount(i,chromList))
  }
 cat("ITERATION",s," -SELECTION\n")
  cat('X',"\t",'Y',"\t",'X-decimal',"\t",'Y-decimal','X-value',"\t",'Y-value',"\t",'f(x)',"\t",'F(X)',"\t",'Pi',"\t",'Cum-Pi',"\t","Random-No","\t","Chromosome","\t",'
TrueCount',"\n")
  for(i in 1:length(bitList)){
    bitTemp<-gsub("\\s+","",bitList[i])
    xTemp<-substr(bitTemp,1,nBits)
    yTemp<-substr(bitTemp,nBits+1,2*nBits)
    cat(xTemp,"\t",yTemp,"\t",xList[i],"\t",yList[i],"\t",xValList[i],"\t",yValList[i],"\t",fXlist[i],"\t",FXlist[i],"\t",probList[i],"\t",cumProbList[i],"\t",rNoList[i],"\t",chromList[i],"\t",trueCountList[i],"\n")
  }
  averageFitness=append(averageFitness,sumFx/popSize)
  newbitList<-vector()
  rNoList<-vector()
  crossOverApplicableList<-vector()
  mutationApplicableList<-vector()
  mutatedChromosome<-vector()
  intermediatePopList<-vector()
  x<-1
  for(i in 1:length(chromList)){
    newbitList=append(newbitList,bitList[chromList[i]])
    rNo=round(runif(1,0,1),3)
    if(i%%2==0){
      rNoList=append(rNoList,rNoList[i-1])
    }
    else{
      rNoList=append(rNoList,rNo)
      x=x+1
    }
    crossOverApplicableList=append(crossOverApplicableList,Applicable(rNoList[i],pCo))
  }
  x<-1
  rNo1List<-vector()
  for(i in seq(1,length(newbitList),2)){
    if(crossOverApplicableList[i]=='Y' && crossOverApplicableList[i+1]=='Y' ){
      coSite<-sample(1:(2*nBits-1),1)
      z<-getIntermediate(newbitList[i],newbitList[i+1],coSite,nBits)
      zTemp<-strsplit(z," ")
      x1Temp<-paste(substr(zTemp[[1]][1],1,nBits),substr(zTemp[[1]][1],nBits+1,2*nBits))
      x2Temp<-paste(substr(zTemp[[1]][2],1,nBits),substr(zTemp[[1]][2],nBits+1,2*nBits))
      intermediatePopList=append(intermediatePopList,x1Temp)
      intermediatePopList=append(intermediatePopList,x2Temp)
      x<-x+1
    }
    else{
      intermediatePopList=append(intermediatePopList,newbitList[i])
      intermediatePopList=append(intermediatePopList,newbitList[i+1])
    }
  }
  for(i in 1:length(newbitList)){
    rNo1List=append(rNo1List,round(runif(1,0,1),3))
    muSite<-sample(1:2*nBits,1)
    mutationApplicableList=append(mutationApplicableList,Applicable(rNo1List[i],pMu))
    if(mutationApplicableList[i]=='Y'){
      mutatedChromosome=append(mutatedChromosome,getMutated(intermediatePopList[i],muSite))
    }
    else{
      mutatedChromosome=append(mutatedChromosome,intermediatePopList[i])
    }
  }
  cat("\nITERATION",s,"-CROSS OVER & MUTATION \n")
  cat('x',"\t",'y',"\t",'r.no',"\t",'crossOver',"\t",'Intermediate x',"\t",'Intermediate y',"\t",'R.No',"\t",'Mutation',"\t",'Chromosome X',"\t",'Chromosome Y',"\n")
  for(i in 1:length(newbitList)){
    bitTemp<-gsub("\\s+","",newbitList[i])
    xTemp<-substr(bitTemp,1,nBits)
    yTemp<-substr(bitTemp,nBits+1,2*nBits)
    intermediatePop<-strsplit(intermediatePopList[i]," ")
    mutatedTemp<-strsplit(mutatedChromosome[i]," ")
   cat(xTemp,"\t",yTemp,"\t",rNoList[i],"\t",crossOverApplicableList[i],"\t",intermediatePop[[1]][1],"\t",intermediatePop[[1]][2],"\t",rNo1List[i],"\t",mutationApplicableList[i],"\t",mutatedTemp[[1]][1],"\t",mutatedTemp[[1]][2],"\n")
  }
  
  s=s+1
  bitList=mutatedChromosome
}
print(averageFitness)
iteration=1:stop
# Plot the bar chart. 
plot(iteration,averageFitness)

dfs
library(igraph)
#graph_1 <- graph( edges=c('A','S','A','T','A','Z','S','F','S','R','S','O','T','L','Z','O','F','B','R','P','R','C','L','M','B','G','B','U','P','B','C','P','M','D','U','H','D','C','H','E','H','V','V','I','I','N'), directed=F)
graph_1 <- graph( edges=c('A','B','A','C','B','D','C','D','C','F','C','L','D','E','F','J','F','K','L','M','E','G','J','K','J','I','K','M','G','H','I','H'), directed=F)
#graph_1<-graph(edges = C('A','B','A','C','B','D','C','D','C','F','C','L','D','E','F','J','F','K','L','M','E','G','J','K','J','I','K','M','G','H','I','H'),directed = F)
#E(graph_1)$weight <- c(36,61,31,32,31,80,52,122,112,102,43,36,45,32,20,40)
E(graph_1)$weight <- 1
E(graph_1)$color <- 'black'
V(graph_1)$color <- 'orange'
found=FALSE
initial <- 'A'
goal <- 'M'
open<-c(initial)
closed<-c()
cost<-0

while(TRUE){
  if(length(open)==0){
    break
  }
  n<-open[1]
  if(n==goal){
    found=TRUE
    V(graph_1)[open[1]]$color <- 'yellow'
    closed<-c(closed,n)
    break
  }
  V(graph_1)[open[1]]$color <- 'yellow'
  closed<-c(closed,open[1])
  
  open<-open[-1]
  adj<-adjacent_vertices(graph_1,n)
  adjlist<-c()
  for(i in 1:length(adj[[1]])){
    if(adj[[1]][i]$name %in% open || adj[[1]][i]$name %in% closed )
      next
    adjlist<-c(adjlist,adj[[1]][i]$name)
  }
  open<-c(adjlist,open)#for dfs
  #open<-c(open,adjlist)#for bfs
}
if(found)
  print(closed)

V(graph_1)[initial]$color <- 'red'
V(graph_1)[goal]$color <- 'red'


for(i in 2:length(closed)-1){
  ei <- get.edge.ids(graph_1, c(closed[i],closed[i+1]))
  cost<-cost+E(graph_1)[ei]$weight
  E(graph_1)[ei]$color<-'orange'
  print(E(graph_1)[ei])
  print(E(graph_1)[ei]$weight)
  print(E(graph_1)[ei]$color)
}
plot(graph_1)
print(cost)

greedy
library(igraph)
node_heuristic<-c(240,186,182,163,170,150,165,139,120,130,122,104,100,77,72,65,65,0)
names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R')

graph_1<-graph(edges=c('A','B','A','C','A','D','A','E','B','K','C','I','D','N','E','J','K','H','I','L','I','M','I','F','N','F','N','J','J','Q','J','G','H','L','L','P','M','O','Q','R','Q','G','P','R','P','O','O','R'),directed=F)
#E(graph_1)$weight<-c(73,64,89,104,83,64,89,40,35,28,20,31,84,53,80,35,36,63,50,65,113,65,41,72)

# node_heuristic<-c(223,222,166,192,165,136,122,111,100,60,32,102,0)
# names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M')
# 
# graph_1<-graph(edges = c('A','B','A','C','B','D','C','D','C','F','C','L','D','E','F','J','F','K','L','M','E','G','J','I','J','K','K','M','G','H','I','H'),directed = F)

start_node<-'A'
goal<-'R'

V(graph_1)$color<-"white"
E(graph_1)$color<-"black"

open<-c()
open[start_node]<-node_heuristic[start_node]
closed<-c()
path<-c()
link<-c()
flag<-FALSE
while(TRUE){
  if(length(open)==0){
    break
  }
  n<-names(open)[1]
  if(n==goal){
    path<-c(path,n)
    flag<-TRUE
    break
  }
  closed<-c(closed,open[1])
  open<-open[-1]
  adj<-adjacent_vertices(graph_1,n)
  for(i in 1:length(adj[[1]])){
    if(adj[[1]][i]$name %in% names(open) || adj[[1]][i]$name %in% names(closed)){
      next
    }
    open[adj[[1]][i]$name]<-node_heuristic[adj[[1]][i]$name]
    link[adj[[1]][i]$name]<-n
  }
  ordered_open<-order(as.numeric(open))
  open<-open[ordered_open]
  print(closed)
  path<-c(path,n)
}

if(flag){
  print(path)
  for(i in 2:length(path)){
    ei <- get.edge.ids(graph_1, c(path[i],link[path[i]]))
    E(graph_1)[ei]$color<-'orange'
  }
  plot(graph_1)
}else{
  print("path not found")
}

hill
library(igraph)
node_heuristic<-c(240,186,182,163,170,150,165,139,120,130,122,104,100,77,72,65,65,0)
names(node_heuristic)<-c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R')

graph_1<-graph(edges=c('A','B','A','C','A','D','A','E','B','K','C','I','D','N','E','J','K','H','I','L','I','M','I','F','N','F','N','J','J','Q','J','G','H','L','L','P','M','O','Q','R','Q','G','P','R','P','O','O','R'),directed=F)
E(graph_1)$weight<-c(73,64,89,104,83,64,89,40,35,28,20,31,84,53,80,35,36,63,50,65,113,65,41,72)

start_node<-'A'
goal<-'R'
path<-c(start_node)
n<-start_node
flag<-FALSE
while(TRUE){
  if(n==goal){
    flag<-TRUE
    break
  }
  adj<-adjacent_vertices(graph_1,n)
  min_cost_child<-adj[[1]][1]$name
  for(i in 2:length(adj[[1]])){
    if(node_heuristic[min_cost_child]>node_heuristic[adj[[1]][i]$name]){
      min_cost_child<-adj[[1]][i]$name
    }
  }
  if(node_heuristic[n]<node_heuristic[min_cost_child]){
    flag<-FALSE
    break
  }
  n<-min_cost_child
  path<-c(path,n)
}
if(flag){
  print(path)
} else{
  print("stopped at local maxima")
  print(path)
}
##
ordered_list<-order(as.numeric(node_heuristic))
node_heuristic<-node_heuristic[ordered_list]
print(node_heuristic)
typeof(node_heuristic)

#print(node_heuristic)
#node_heuristic<-node_heuristic[names(node_heuristic)!='A']
#print(node_heuristic)
